"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var error_1 = require("../error");
var base_1 = require("../base");
var alg_1 = require("../alg");
var AesKeyGenParamsError = (function (_super) {
    __extends(AesKeyGenParamsError, _super);
    function AesKeyGenParamsError() {
        var _this = _super.apply(this, arguments) || this;
        _this.code = 7;
        return _this;
    }
    return AesKeyGenParamsError;
}(error_1.AlgorithmError));
var Aes = (function (_super) {
    __extends(Aes, _super);
    function Aes() {
        return _super.apply(this, arguments) || this;
    }
    Aes.checkKeyUsages = function (keyUsages) {
        var _this = this;
        _super.checkKeyUsages.call(this, keyUsages);
        var wron_usage = keyUsages.filter(function (usage) { return _this.KEY_USAGES.indexOf(usage) === -1; });
        if (wron_usage.length)
            throw new error_1.AlgorithmError(error_1.AlgorithmError.WRONG_USAGE, wron_usage.join(", "));
    };
    Aes.checkAlgorithm = function (alg) {
        if (alg.name.toUpperCase() !== this.ALG_NAME.toUpperCase())
            throw new error_1.AlgorithmError(error_1.AlgorithmError.WRONG_ALG_NAME, alg.name, this.ALG_NAME);
    };
    Aes.checkKeyGenParams = function (alg) {
        switch (alg.length) {
            case 128:
            case 192:
            case 256:
                break;
            default:
                throw new AesKeyGenParamsError(AesKeyGenParamsError.PARAM_WRONG_VALUE, "length", "128, 192 or 256");
        }
    };
    Aes.checkKeyGenUsages = function (keyUsages) {
        var _this = this;
        this.checkKeyUsages(keyUsages);
        keyUsages.forEach(function (usage) {
            var i = 0;
            for (i; i < _this.KEY_USAGES.length; i++)
                if (_this.KEY_USAGES[i].toLowerCase() === usage.toLowerCase()) {
                    break;
                }
            if (i === _this.KEY_USAGES.length)
                throw new error_1.WebCryptoError("Unsuported key usage '" + usage + "'. Should be one of [" + _this.KEY_USAGES.join(", ") + "]");
        });
    };
    Aes.generateKey = function (algorithm, extractable, keyUsages) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.checkAlgorithm(algorithm);
            _this.checkKeyGenParams(algorithm);
            _this.checkKeyGenUsages(keyUsages);
            resolve(undefined);
        });
    };
    Aes.exportKey = function (format, key) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.checkKey(key, _this.ALG_NAME);
            _this.checkFormat(format, key.type);
            resolve(undefined);
        });
    };
    Aes.importKey = function (format, keyData, algorithm, extractable, keyUsages) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.checkAlgorithm(algorithm);
            _this.checkFormat(format);
            if (!(format.toLowerCase() === "raw" || format.toLowerCase() === "jwk"))
                throw new error_1.CryptoKeyError(error_1.CryptoKeyError.ALLOWED_FORMAT, format, "'jwk' or 'raw'");
            _this.checkKeyGenUsages(keyUsages);
            resolve(undefined);
        });
    };
    return Aes;
}(base_1.BaseCrypto));
Aes.ALG_NAME = "";
Aes.KEY_USAGES = [];
exports.Aes = Aes;
var AesAlgorithmError = (function (_super) {
    __extends(AesAlgorithmError, _super);
    function AesAlgorithmError() {
        var _this = _super.apply(this, arguments) || this;
        _this.code = 8;
        return _this;
    }
    return AesAlgorithmError;
}(error_1.AlgorithmError));
exports.AesAlgorithmError = AesAlgorithmError;
var AesWrapKey = (function (_super) {
    __extends(AesWrapKey, _super);
    function AesWrapKey() {
        return _super.apply(this, arguments) || this;
    }
    AesWrapKey.wrapKey = function (format, key, wrappingKey, wrapAlgorithm) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.checkAlgorithmParams(wrapAlgorithm);
            _this.checkKey(wrappingKey, _this.ALG_NAME, "secret", "wrapKey");
            _this.checkWrappedKey(key);
            _this.checkFormat(format, key.type);
            resolve(undefined);
        });
    };
    AesWrapKey.unwrapKey = function (format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.checkAlgorithmParams(unwrapAlgorithm);
            _this.checkKey(unwrappingKey, _this.ALG_NAME, "secret", "unwrapKey");
            _this.checkFormat(format);
            // TODO check unwrappedKeyAlgorithm
            // TODO check keyUSages
            resolve(undefined);
        });
    };
    return AesWrapKey;
}(Aes));
exports.AesWrapKey = AesWrapKey;
var AesEncrypt = (function (_super) {
    __extends(AesEncrypt, _super);
    function AesEncrypt() {
        return _super.apply(this, arguments) || this;
    }
    AesEncrypt.encrypt = function (algorithm, key, data) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.checkAlgorithmParams(algorithm);
            _this.checkKey(key, _this.ALG_NAME, "secret", "encrypt");
            resolve(undefined);
        });
    };
    AesEncrypt.decrypt = function (algorithm, key, data) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.checkAlgorithmParams(algorithm);
            _this.checkKey(key, _this.ALG_NAME, "secret", "decrypt");
            resolve(undefined);
        });
    };
    return AesEncrypt;
}(AesWrapKey));
AesEncrypt.KEY_USAGES = ["encrypt", "decrypt", "wrapKey", "unwrapKey"];
exports.AesEncrypt = AesEncrypt;
var AesCBC = (function (_super) {
    __extends(AesCBC, _super);
    function AesCBC() {
        return _super.apply(this, arguments) || this;
    }
    AesCBC.checkAlgorithmParams = function (alg) {
        this.checkAlgorithm(alg);
        if (!alg.iv)
            throw new AesAlgorithmError(AesAlgorithmError.PARAM_REQUIRED, "iv");
        if (!ArrayBuffer.isView(alg.iv))
            throw new AesAlgorithmError(AesAlgorithmError.PARAM_WRONG_TYPE, "iv", "ArrayBufferView");
        if (alg.iv.byteLength !== 16)
            throw new AesAlgorithmError(AesAlgorithmError.PARAM_WRONG_VALUE, "iv", "ArrayBufferView with size 16");
    };
    return AesCBC;
}(AesEncrypt));
AesCBC.ALG_NAME = alg_1.AlgorithmNames.AesCBC;
exports.AesCBC = AesCBC;
var AesCTR = (function (_super) {
    __extends(AesCTR, _super);
    function AesCTR() {
        return _super.apply(this, arguments) || this;
    }
    AesCTR.checkAlgorithmParams = function (alg) {
        this.checkAlgorithm(alg);
        if (!(alg.counter && ArrayBuffer.isView(alg.counter)))
            throw new AesAlgorithmError(AesAlgorithmError.PARAM_WRONG_TYPE, "counter", "ArrayBufferView");
        if (alg.counter.byteLength !== 16)
            throw new AesAlgorithmError(AesAlgorithmError.PARAM_WRONG_VALUE, "counter", "ArrayBufferView with size 16");
        if (!(alg.length > 0 && alg.length <= 128))
            throw new AesAlgorithmError(AesAlgorithmError.PARAM_WRONG_VALUE, "length", "number [1-128]");
    };
    return AesCTR;
}(AesEncrypt));
AesCTR.ALG_NAME = alg_1.AlgorithmNames.AesCTR;
exports.AesCTR = AesCTR;
var AesGCM = (function (_super) {
    __extends(AesGCM, _super);
    function AesGCM() {
        return _super.apply(this, arguments) || this;
    }
    AesGCM.checkAlgorithmParams = function (alg) {
        this.checkAlgorithm(alg);
        if (alg.additionalData)
            if (!ArrayBuffer.isView(alg.additionalData))
                throw new AesAlgorithmError(AesAlgorithmError.PARAM_WRONG_TYPE, "additionalData", "ArrayBufferView");
        if (!alg.iv)
            throw new AesAlgorithmError(AesAlgorithmError.PARAM_REQUIRED, "iv");
        if (!ArrayBuffer.isView(alg.iv))
            throw new AesAlgorithmError(AesAlgorithmError.PARAM_WRONG_TYPE, "iv", "ArrayBufferView");
        if (alg.tagLength)
            if (!(alg.tagLength >= 0 && alg.tagLength <= 128))
                throw new AesAlgorithmError(AesAlgorithmError.PARAM_WRONG_VALUE, "tagLength", "number [0-128]");
    };
    return AesGCM;
}(AesEncrypt));
AesGCM.ALG_NAME = alg_1.AlgorithmNames.AesGCM;
exports.AesGCM = AesGCM;
var AesKW = (function (_super) {
    __extends(AesKW, _super);
    function AesKW() {
        return _super.apply(this, arguments) || this;
    }
    AesKW.checkAlgorithmParams = function (alg) {
        this.checkAlgorithm(alg);
    };
    return AesKW;
}(AesWrapKey));
AesKW.ALG_NAME = alg_1.AlgorithmNames.AesKW;
AesKW.KEY_USAGES = ["wrapKey", "unwrapKey"];
exports.AesKW = AesKW;
